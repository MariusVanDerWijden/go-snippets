// Code generated via abigen V2 - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package geth

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ArrayMetaData contains all meta data concerning the Array contract.
var ArrayMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"get_array\",\"outputs\":[{\"internalType\":\"uint8[2][4]\",\"name\":\"\",\"type\":\"uint8[2][4]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50610481806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c75d70ed14610030575b600080fd5b61003861004e565b6040516100459190610399565b60405180910390f35b61005661025d565b61005e61025d565b6000816000600481106100745761007361041c565b5b602002015160006002811061008c5761008b61041c565b5b602002019060ff16908160ff16815250506001816001600481106100b3576100b261041c565b5b60200201516000600281106100cb576100ca61041c565b5b602002019060ff16908160ff16815250506002816002600481106100f2576100f161041c565b5b602002015160006002811061010a5761010961041c565b5b602002019060ff16908160ff16815250506003816003600481106101315761013061041c565b5b60200201516000600281106101495761014861041c565b5b602002019060ff16908160ff16815250506004816000600481106101705761016f61041c565b5b60200201516001600281106101885761018761041c565b5b602002019060ff16908160ff16815250506005816001600481106101af576101ae61041c565b5b60200201516001600281106101c7576101c661041c565b5b602002019060ff16908160ff16815250506006816002600481106101ee576101ed61041c565b5b60200201516001600281106102065761020561041c565b5b602002019060ff16908160ff168152505060078160036004811061022d5761022c61041c565b5b60200201516001600281106102455761024461041c565b5b602002019060ff16908160ff16815250508091505090565b60405180608001604052806004905b61027461028a565b81526020019060019003908161026c5790505090565b6040518060400160405280600290602082028036833780820191505090505090565b60006102b88383610333565b60408301905092915050565b60006102d0838361038a565b60208301905092915050565b6102e5816103c9565b6102ef81846103f9565b92506102fa826103b5565b8060005b8381101561032b57815161031287826102ac565b965061031d836103df565b9250506001810190506102fe565b505050505050565b61033c816103d4565b6103468184610404565b9250610351826103bf565b8060005b8381101561038257815161036987826102c4565b9650610374836103ec565b925050600181019050610355565b505050505050565b6103938161040f565b82525050565b6000610100820190506103af60008301846102dc565b92915050565b6000819050919050565b6000819050919050565b600060049050919050565b600060029050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600060ff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212204663429742b35e078751ae74339037a2eccb8fd323e12328b927072e305812b164736f6c63430008070033",
}

// Array is an auto generated Go binding around an Ethereum contract.
type Array struct {
	abi abi.ABI
}

// ArrayInstance represents a deployed instance of the Array contract.
type ArrayInstance struct {
	Array
	address common.Address
}

func (i *ArrayInstance) Address() common.Address {
	return i.address
}

// NewArray creates a new instance of Array.
func NewArray() (*Array, error) {
	parsed, err := ArrayMetaData.GetAbi()
	if err != nil {
		return nil, err
	}

	return &Array{abi: *parsed}, nil
}

func (_Array *Array) PackConstructor() ([]byte, error) {
	return _Array.abi.Pack("")
}

// GetArray is a free data retrieval call binding the contract method 0xc75d70ed.
//
// Solidity: function get_array() pure returns(uint8[2][4])
func (_Array *Array) PackGetArray() ([]byte, error) {
	return _Array.abi.Pack("get_array")
}

func (_Array *Array) UnpackGetArray(data []byte) ([4][2]uint8, error) {
	out, err := _Array.abi.Unpack("get_array", data)

	if err != nil {
		return *new([4][2]uint8), err
	}

	out0 := *abi.ConvertType(out[0], new([4][2]uint8)).(*[4][2]uint8)

	return out0, err

}
